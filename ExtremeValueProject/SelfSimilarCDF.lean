/-
Copyright (c) 2025 Kalle Kyt√∂l√§. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kalle Kyt√∂l√§, ...
-/
import Mathlib
import ExtremeValueProject.OneParameterAffine
import ExtremeValueProject.OrderContinuity
import ExtremeValueProject.ExtremeValueDistribution

section self_similar_cdf

noncomputable def CumulativeDistributionFunction.comp_rightOrdContinuous
    (F : CumulativeDistributionFunction) (œÜ : ‚Ñù ‚Üí ‚Ñù) (hœÜ : RightOrdContinuous œÜ)
    (hœÜ0 : œÜ 0 = 0) (hœÜ0 : œÜ 1 = 1) :
    CumulativeDistributionFunction where
  toFun x := œÜ (F x)
  mono' := by sorry
  right_continuous' := by sorry
  tendsto_atTop := by sorry
  tendsto_atBot := by sorry

open Set Topology in
lemma Real.rightOrdContinuous_indicator_Ici_rpow {t : ‚Ñù} (t_nn : 0 < t) :
    RightOrdContinuous (indicator (Ici 0) (fun p ‚Ü¶ Real.rpow p t)) := by
  -- This is a bad proof. Should just prove continuity.
  refine Monotone.rightOrdContinuous_of_forall_continuousWithinAt_Ici ?_ ?_
  ¬∑ intro p‚ÇÅ p‚ÇÇ hp
    by_cases nn‚ÇÅ : 0 ‚â§ p‚ÇÅ
    ¬∑ simpa [show p‚ÇÅ ‚àà Ici 0 from nn‚ÇÅ, show p‚ÇÇ ‚àà Ici 0 from nn‚ÇÅ.trans hp]
        using rpow_le_rpow nn‚ÇÅ hp t_nn.le
    ¬∑ have hp‚ÇÅ : ¬¨ p‚ÇÅ ‚àà Ici 0 := nn‚ÇÅ
      by_cases nn‚ÇÇ : 0 ‚â§ p‚ÇÇ
      ¬∑ simpa [hp‚ÇÅ, show p‚ÇÇ ‚àà Ici 0 from nn‚ÇÇ] using rpow_nonneg nn‚ÇÇ t
      ¬∑ simp [hp‚ÇÅ, show ¬¨ p‚ÇÇ ‚àà Ici 0 from nn‚ÇÇ]
  ¬∑ intro p
    by_cases p_nn : 0 ‚â§ p
    ¬∑ apply ContinuousWithinAt.congr (f := fun q ‚Ü¶ Real.rpow q t)
      ¬∑ exact (continuous_rpow_const t_nn.le).continuousWithinAt
      ¬∑ intro y hy
        simp [p_nn.trans hy]
      ¬∑ simp [p_nn]
    ¬∑ apply ContinuousWithinAt.congr_of_eventuallyEq (f := 0)
      ¬∑ exact continuous_const.continuousWithinAt
      ¬∑ have nhd : Iio 0 ‚àà ùìù[‚â•] p :=
          mem_nhdsGE_iff_exists_Ico_subset.mpr ‚ü®0, lt_of_not_ge p_nn, Ico_subset_Iio_self‚ü©
        filter_upwards [nhd] with y hy
        simp [show ¬¨ y ‚àà Ici 0 from not_mem_Ici.mpr hy]
      ¬∑ simp [p_nn]

noncomputable def CumulativeDistributionFunction.pow
    (F : CumulativeDistributionFunction) {t : ‚Ñù} (t_pos : 0 < t) :
    CumulativeDistributionFunction :=
  F.comp_rightOrdContinuous _ (Real.rightOrdContinuous_indicator_Ici_rpow t_pos)
    (by simpa using Real.zero_rpow t_pos.ne.symm) (by simp)

lemma CumulativeDistributionFunction.pow_apply_eq
    (F : CumulativeDistributionFunction) {t : ‚Ñù} (t_pos : 0 < t) (x : ‚Ñù) :
    F.pow t_pos x = (F x) ^ t := by
  simp [pow, comp_rightOrdContinuous, show ¬¨ F x < 0 by simpa using apply_nonneg F x]

open Real

lemma gumbel_type_of_selfSimilar_index_zero' {G : CumulativeDistributionFunction}
    (G_nondeg : ¬¨ G.IsDegenerate) {Œ≤ : ‚Ñù} (Œ≤_pos : 0 < Œ≤)
    (hG : ‚àÄ s, (AffineIncrEquiv.homOfIndex‚ÇÄ Œ≤ s) ‚Ä¢ G = G.pow (exp_pos s)) (x : ‚Ñù) :
    G x = exp (-(exp (-Œ≤‚Åª¬π * x + log (- (log (G 0)))))) := by
  sorry

theorem gumbel_type_of_selfSimilar_index_zero
    {G : CumulativeDistributionFunction} (G_nondeg : ¬¨ G.IsDegenerate) {Œ≤ : ‚Ñù} (Œ≤_pos : 0 < Œ≤)
    (hG : ‚àÄ s, (AffineIncrEquiv.homOfIndex‚ÇÄ Œ≤ s) ‚Ä¢ G = G.pow (exp_pos s)) :
    G = (AffineIncrEquiv.mkOfCoefs (Right.inv_pos.mpr Œ≤_pos) (-(log (- (log (G 0))))))‚Åª¬π
        ‚Ä¢ standardGumbelCDF := by
  ext x
  rw [gumbel_type_of_selfSimilar_index_zero' G_nondeg Œ≤_pos hG]
  simp only [CumulativeDistributionFunction.mulAction_apply_eq, inv_inv, AffineIncrEquiv.apply_eq,
             AffineIncrEquiv.coefs_fst_mkOfCoefs, one_mul, AffineIncrEquiv.coefs_snd_mkOfCoefs]
  rw [standardGumbelCDF_apply_eq]
  simp only [neg_mul, log_neg_eq_log, neg_add_rev, neg_neg, exp_eq_exp, neg_inj]
  ring

lemma frechet_type_of_selfSimilar_index_pos' {G : CumulativeDistributionFunction}
    (G_nondeg : ¬¨ G.IsDegenerate) {Œ± c : ‚Ñù} (Œ±_pos : 0 < Œ±)
    (hG : ‚àÄ s, (AffineIncrEquiv.homOfIndex Œ± c s) ‚Ä¢ G = G.pow (exp_pos s)) {x : ‚Ñù}
    (hx : c ‚â§ x) :
    G x = exp (-(((x - c) / ((-(log (G (c + 1)))) ^ Œ±)) ^ (-Œ±‚Åª¬π))) := by
  sorry

-- theorem frechet_type_of_selfSimilar_index_pos

lemma weibull_type_of_selfSimilar_index_neg' {G : CumulativeDistributionFunction}
    (G_nondeg : ¬¨ G.IsDegenerate) {Œ± c : ‚Ñù} (Œ±_neg : Œ± < 0)
    (hG : ‚àÄ s, (AffineIncrEquiv.homOfIndex Œ± c s) ‚Ä¢ G = G.pow (exp_pos s)) {x : ‚Ñù}
    (hx : x ‚â§ c) :
    G x = exp (-(((c - x) / ((-(log (G (c - 1)))) ^ Œ±)) ^ (-Œ±‚Åª¬π))) := by
  sorry

-- theorem weibull_type_of_selfSimilar_index_neg

end self_similar_cdf
